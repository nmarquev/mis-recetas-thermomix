// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  alias        String?  // Optional alias for display
  password     String
  profilePhoto String?  // Profile photo URL/path
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  recipes Recipe[]

  @@map("users")
}

model Recipe {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  prepTime    Int      // in minutes
  cookTime    Int?     // in minutes
  servings    Int
  difficulty  String   // "Fácil" | "Medio" | "Difícil"
  recipeType  String?
  sourceUrl   String?  // URL if imported
  featured    Boolean? @default(false) // Favorite/starred recipe
  locution    String?  // TTS script text for audio playback

  // Nutritional information (per serving)
  calories      Float? // Calories per serving
  protein       Float? // Protein in grams per serving
  carbohydrates Float? // Carbohydrates in grams per serving
  fat           Float? // Fat in grams per serving
  fiber         Float? // Fiber in grams per serving
  sugar         Float? // Sugar in grams per serving
  sodium        Float? // Sodium in milligrams per serving

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  images       RecipeImage[]
  ingredients  Ingredient[]
  instructions Instruction[]
  tags         RecipeTag[]

  @@map("recipes")
}

model RecipeImage {
  id        String  @id @default(cuid())
  recipeId  String
  url       String  // Original URL if imported
  localPath String? // Local file path after download
  order     Int     // 1, 2, 3 for ordering
  altText   String?

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("recipe_images")
}

model Ingredient {
  id       String  @id @default(cuid())
  recipeId String
  name     String
  amount   String
  unit     String?
  order    Int
  section  String? // Section for multi-part recipes (e.g., "Plato principal", "Salsa")

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("ingredients")
}

model Instruction {
  id          String  @id @default(cuid())
  recipeId    String
  step        Int
  description String
  function    String? // Thermomix function (e.g., "Amasar", "Batir", "Picar")
  time        String? // Thermomix time setting
  temperature String? // Thermomix temperature setting
  speed       String? // Thermomix speed setting
  section     String? // Section for multi-part recipes

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("instructions")
}

model Tag {
  id   String @id @default(cuid())
  name String @unique

  recipes RecipeTag[]

  @@map("tags")
}

model RecipeTag {
  recipeId String
  tagId    String

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([recipeId, tagId])
  @@map("recipe_tags")
}